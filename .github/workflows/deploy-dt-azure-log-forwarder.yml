name: Deploy Dynatrace Azure Log Forwarder

on:
  workflow_dispatch:
    inputs:
      deployment_name:
        description: "Nom (3-20 caractères, minuscules/chiffres)"
        required: true
      resource_group:
        description: "Resource Group cible (ex: rg-dt-logs)"
        required: true
      use_activegate:
        description: "true pour déployer en mode privé via ActiveGate"
        required: true
        default: "false"
      enable_self_monitoring:
        description: "Activer la télémétrie self-monitoring (Azure Metrics)"
        required: true
        default: "false"
      filter_config:
        description: "OPTIONNEL - Chaîne de filtres (ex: FILTER.GLOBAL.MIN_LOG_LEVEL=Warning)"
        required: false
      require_valid_certificate:
        description: "Vérifier le certificat (ActiveGate). true/false"
        required: true
        default: "false"

      # --- Intégration VNet & Private Endpoint ---
      vnet_rg:
        description: "RG du VNet à intégrer (sortant)"
        required: true
      vnet_name:
        description: "Nom du VNet à intégrer (sortant)"
        required: true
      vnet_subnet_name:
        description: "Sous-réseau DÉDIÉ pour l'intégration VNet (doit être vide)"
        required: true

      pe_rg:
        description: "RG pour le Private Endpoint (entrant)"
        required: true
      pe_vnet_name:
        description: "VNet contenant le Private Endpoint"
        required: true
      pe_subnet_name:
        description: "Sous-réseau pour le Private Endpoint"
        required: true
      create_private_dns_zone_group:
        description: "Créer l'association Private DNS zone (privatelink.azurewebsites.net)"
        required: true
        default: "true"
      private_dns_zone_rg:
        description: "RG de la zone privée (si création/association)"
        required: false
      private_dns_zone_name:
        description: "Nom de la zone privée"
        required: false
        default: "privatelink.azurewebsites.net"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Utilisez un SPN avec secret (credentials) ou OIDC. Ici: JSON complet dans AZURE_CREDENTIALS.
      - name: Azure login
        uses: azure/login@v2
        with:
          credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI deps
        run: |
          az version
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Set env
        id: env
        run: |
          "DEPLOYMENT_NAME=${{ secrets.deployment_name }}" >> $GITHUB_ENV
          "RESOURCE_GROUP=${{ secrets.resource_group }}" >> $GITHUB_ENV
          "TARGET_URL=${{ secrets.DT_TARGET_URL }}" >> $GITHUB_ENV
          "TARGET_API_TOKEN=${{ secrets.DT_API_TOKEN }}" >> $GITHUB_ENV
          "EVENT_HUB_CONNECTION_STRING=${{ secrets.EVENT_HUB_CONNECTION_STRING }}" >> $GITHUB_ENV
          "USE_EXISTING_ACTIVE_GATE=${{ secrets.use_activegate }}" >> $GITHUB_ENV
          "REQUIRE_VALID_CERTIFICATE=${{ secrets.require_valid_certificate }}" >> $GITHUB_ENV

          # Optionnels
          if [ -n "${{ github.event.inputs.filter_config }}" ]; then
            echo "FILTER_CONFIG=${{ github.event.inputs.filter_config }}" >> $GITHUB_ENV
          fi
          if [ "${{ github.event.inputs.enable_self_monitoring }}" = "true" ]; then
            echo "SFM_ENABLED=true" >> $GITHUB_ENV
          fi

          # VNet/PE
          "VNET_RG=${{ secrets.vnet_rg }}" >> $GITHUB_ENV
          "VNET_NAME=${{ secrets.vnet_name }}" >> $GITHUB_ENV
          "VNET_SUBNET_NAME=${{ secrets.vnet_subnet_name }}" >> $GITHUB_ENV
          "PE_RG=${{ secrets.resource_group }}" >> $GITHUB_ENV
          "PE_VNET_NAME=${{ secrets.vnet_name }}" >> $GITHUB_ENV
          "PE_SUBNET_NAME=${{ secrets.vnet_subnet_name }}" >> $GITHUB_ENV
          echo "CREATE_PE_DNS=${{ github.event.inputs.create_private_dns_zone_group }}" >> $GITHUB_ENV
          if [ -n "${{ github.event.inputs.private_dns_zone_rg }}" ]; then
            echo "PRIVATE_DNS_ZONE_RG=${{ github.event.inputs.private_dns_zone_rg }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ github.event.inputs.private_dns_zone_name }}" ]; then
            echo "PRIVATE_DNS_ZONE_NAME=${{ github.event.inputs.private_dns_zone_name }}" >> $GITHUB_ENV
          fi

      - name: Validate inputs (length/charset)
        run: |
          if ! [[ "$DEPLOYMENT_NAME" =~ ^[a-z0-9]{3,20}$ ]]; then
            echo "DEPLOYMENT_NAME doit être 3-20 chars, minuscules/chiffres."; exit 1
          fi

      - name: Download installer script (latest)
        run: |
          curl -fsSL https://github.com/dynatrace-oss/dynatrace-azure-log-forwarder/releases/latest/download/dynatrace-azure-logs.sh -o dynatrace-azure-logs.sh
          chmod +x dynatrace-azure-logs.sh

      - name: Deploy (SaaS or ActiveGate)
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          TARGET_URL: ${{ env.TARGET_URL }}
          TARGET_API_TOKEN: ${{ env.TARGET_API_TOKEN }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          EVENT_HUB_CONNECTION_STRING: ${{ env.EVENT_HUB_CONNECTION_STRING }}
          USE_EXISTING_ACTIVE_GATE: ${{ env.USE_EXISTING_ACTIVE_GATE }}
          REQUIRE_VALID_CERTIFICATE: ${{ env.REQUIRE_VALID_CERTIFICATE }}
          FILTER_CONFIG: ${{ env.FILTER_CONFIG }}
          SFM_ENABLED: ${{ env.SFM_ENABLED }}
        run: |
          set -euo pipefail
          echo "Deploying Dynatrace Azure Log Forwarder..."
          args=(
            --deployment-name "$DEPLOYMENT_NAME"
            --target-url "$TARGET_URL"
            --target-api-token "$TARGET_API_TOKEN"
            --resource-group "$RESOURCE_GROUP"
            --event-hub-connection-string "$EVENT_HUB_CONNECTION_STRING"
            --require-valid-certificate "$REQUIRE_VALID_CERTIFICATE"
          )
          if [ "${USE_EXISTING_ACTIVE_GATE}" = "true" ]; then
            args+=( --use-existing-active-gate true )
          fi
          if [ -n "${FILTER_CONFIG:-}" ]; then
            args+=( --filter-config "$FILTER_CONFIG" )
          fi
          if [ -n "${SFM_ENABLED:-}" ]; then
            args+=( --enable-self-monitoring true )
          fi

          ./dynatrace-azure-logs.sh "${args[@]}"

      - name: Output function name
        id: out
        run: |
          APP_NAME=$(az functionapp list -g "$RESOURCE_GROUP" --query "[?contains(name, '$DEPLOYMENT_NAME')].name | [0]" -o tsv)
          if [ -z "$APP_NAME" ] || [ "$APP_NAME" = "null" ]; then
            echo "Impossible de retrouver la Function App créée (prefix: $DEPLOYMENT_NAME)"; exit 1
          fi
          echo "FUNCTION_APP=$APP_NAME" >> $GITHUB_ENV
          echo "function_app=$APP_NAME" >> $GITHUB_OUTPUT
          echo "Function App: $APP_NAME"
          az functionapp show -g "$RESOURCE_GROUP" -n "$APP_NAME" --query "defaultHostName" -o tsv || true

      # ---------------------------
      # Intégration RÉGIONALE VNET
      # ---------------------------
      - name: Check plan/SKU and hosting compatibility
        id: sku
        run: |
          set -euo pipefail
          PLAN_ID=$(az functionapp show -g "$RESOURCE_GROUP" -n "$FUNCTION_APP" --query "serverFarmId" -o tsv)
          SKU_TIER=$(az appservice plan show --ids "$PLAN_ID" --query "sku.tier" -o tsv)
          SKU_NAME=$(az appservice plan show --ids "$PLAN_ID" --query "sku.name" -o tsv)
          echo "AppService plan SKU: $SKU_TIER/$SKU_NAME"
          if [ "$SKU_TIER" = "Free" ] || [ "$SKU_TIER" = "Shared" ]; then
            echo "::warning::Le SKU $SKU_TIER ne supporte pas Private Endpoint pour App Service."
          fi

      - name: Integrate Function App with existing VNet (outbound)
        run: |
          set -euo pipefail
          SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)
          az functionapp vnet-integration add \
            -g "$RESOURCE_GROUP" \
            -n "$FUNCTION_APP" \
            --vnet "/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${VNET_RG}/providers/Microsoft.Network/virtualNetworks/${VNET_NAME}" \
            --subnet "${VNET_SUBNET_NAME}"

      # ---------------------------
      # Private Endpoint (entrant)
      # ---------------------------
      - name: Prepare Private Endpoint inputs (resolve groupId)
        id: pelist
        run: |
          set -euo pipefail
          APP_ID=$(az functionapp show -g "$RESOURCE_GROUP" -n "$FUNCTION_APP" --query "id" -o tsv)
          GROUP_ID=$(az network private-link-resource list --id "$APP_ID" --query "[0].properties.groupId" -o tsv)
          if [ -z "$GROUP_ID" ] || [ "$GROUP_ID" = "null" ]; then
            GROUP_ID="sites"
          fi
          echo "GROUP_ID=$GROUP_ID" >> $GITHUB_ENV
          echo "APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "app_id=$APP_ID" >> $GITHUB_OUTPUT

      - name: Create Private Endpoint (inbound)
        env:
          APP_ID: ${{ steps.pelist.outputs.app_id }}
        run: |
          set -euo pipefail
          az network private-endpoint create \
            -g "$PE_RG" \
            -n "${DEPLOYMENT_NAME}-func-pe" \
            --vnet-name "$PE_VNET_NAME" \
            --subnet "$PE_SUBNET_NAME" \
            --private-connection-resource-id "$APP_ID" \
            --group-id "$GROUP_ID" \
            --connection-name "${DEPLOYMENT_NAME}-func-pe-conn"

      - name: (Optional) Attach Private DNS zone group
        if: ${{ env.CREATE_PE_DNS == 'true' }}
        run: |
          set -euo pipefail
          SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)

          if [ -n "${PRIVATE_DNS_ZONE_RG:-}" ]; then
            az network private-dns zone create \
              -g "$PRIVATE_DNS_ZONE_RG" \
              -n "${PRIVATE_DNS_ZONE_NAME:-privatelink.azurewebsites.net}" \
              --if-none-match
          fi

          PE_NAME="${DEPLOYMENT_NAME}-func-pe"
          az network private-endpoint dns-zone-group create \
            --endpoint-name "$PE_NAME" \
            -g "$PE_RG" \
            -n "${DEPLOYMENT_NAME}-pe-dnsgrp" \
            --zone-name "${DEPLOYMENT_NAME}-pe-dnszone" \
            --private-dns-zone "/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${PRIVATE_DNS_ZONE_RG}/providers/Microsoft.Network/privateDnsZones/${PRIVATE_DNS_ZONE_NAME:-privatelink.azurewebsites.net}"
