name: Deploy Dynatrace Azure Log Forwarder (â‰¤10 inputs)

on:
  workflow_dispatch:
    inputs:
      deployment_name:
        description: "Nom (3-20, minuscules/chiffres)"
        required: true
      enable_self_monitoring:
        description: "Activer la telemetrie self-monitoring"
        required: true
        default: "false"
      filter_config:
        description: "OPTIONNEL - Filtres (ex: FILTER.GLOBAL.MIN_LOG_LEVEL=Warning)"
        required: false
      network_mode:
        description: "existing (utiliser VNet existant) ou create (creer VNet)"
        required: true
        default: "existing"
      vnet_name:
        description: "Nom du VNet a utiliser/creer"
        required: true
      vnet_rg:
        description: "RG du VNet (vide = RG deduit Event Hub)"
        required: false
      int_subnet_name:
        description: "Subnet d'integration VNet (sortant)"
        required: true
        default: "snet-appsvc-int"
      pe_subnet_name:
        description: "Subnet Private Endpoint (entrant)"
        required: true
        default: "snet-pe"
      create_missing_subnets:
        description: "Creer les subnets manquants (en mode existing)"
        required: true
        default: "true"
      create_private_dns_zone_group:
        description: "Creer l'association Private DNS zone (privatelink.azurewebsites.net)"
        required: true
        default: "true"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Auth auto: SPN JSON via secrets/vars -> creds:, sinon OIDC ---
      - name: Decide auth mode (SPN JSON from secrets/vars, else OIDC)
        id: auth
        shell: bash
        run: |
          set -euo pipefail
          RAW="${{ secrets.AZURE_CREDENTIALS }}"
          SRC="secrets"
          if [ -z "$RAW" ] || [ "$RAW" = "null" ]; then
            RAW="${{ vars.AZURE_CREDENTIALS }}"
            SRC="vars"
          fi
          MODE="spn"
          if [ -n "$RAW" ] && [ "$RAW" != "null" ]; then
            echo "$RAW" | grep -q '"clientId"' && \
            echo "$RAW" | grep -q '"clientSecret"' && \
            echo "$RAW" | grep -q '"subscriptionId"' && \
            echo "$RAW" | grep -q '"tenantId"' && MODE="spn" || MODE=""
          fi
          if [ -z "$MODE" ]; then
            CID='${{ secrets.AZURE_CLIENT_ID }}'
            TID='${{ secrets.AZURE_TENANT_ID }}'
            SID='${{ secrets.AZURE_SUBSCRIPTION_ID }}'
            if [ -n "$CID" ] && [ "$CID" != "null" ] && [ -n "$TID" ] && [ "$TID" != "null" ] && [ -n "$SID" ] && [ "$SID" != "null" ]; then
              MODE="oidc"
            fi
          fi
          if [ "$MODE" = "spn" ]; then
            {
              echo "AZ_CRED_JSON<<EOF"
              echo "$RAW"
              echo "EOF"
            } >> "$GITHUB_ENV"
            echo "mode=spn" >> "$GITHUB_OUTPUT"
            echo "source=$SRC" >> "$GITHUB_OUTPUT"
          elif [ "$MODE" = "oidc" ]; then
            echo "mode=oidc" >> "$GITHUB_OUTPUT"
          else
            printf '%s\n' "::error::Aucun mode d'auth detecte. Fournis AZURE_CREDENTIALS (JSON camelCase) ou OIDC (AZURE_CLIENT_ID / AZURE_TENANT_ID / AZURE_SUBSCRIPTION_ID)."
            exit 1
          fi

      - name: Azure login (Service Principal JSON)
        if: ${{ steps.auth.outputs.mode == 'spn' }}
        uses: azure/login@v2
        with:
          creds: ${{ env.AZ_CRED_JSON }}

      - name: Azure login (OIDC)
        if: ${{ steps.auth.outputs.mode == 'oidc' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install CLI deps
        run: |
          az version
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      # ---- Charger secrets/vars + valider ----
      - name: Load and validate base env
        shell: bash
        run: |
          set -euo pipefail

          DEPLOYMENT_NAME='${{ github.event.inputs.deployment_name }}'
          [[ "$DEPLOYMENT_NAME" =~ ^[a-z0-9]{3,20}$ ]] || { echo "::error::deployment_name doit etre 3-20, minuscules/chiffres"; exit 1; }
          echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> $GITHUB_ENV

          TARGET_URL="${{ secrets.DT_TARGET_URL }}"; [ -n "$TARGET_URL" ] || TARGET_URL='${{ vars.DT_TARGET_URL }}'
          TARGET_API_TOKEN='${{ secrets.DT_API_TOKEN }}'; [ -n "$TARGET_API_TOKEN" ] || TARGET_API_TOKEN='${{ vars.DT_API_TOKEN }}'
          EH_CS='${{ secrets.EVENT_HUB_CONNECTION_STRING }}'; [ -n "$EH_CS" ] || EH_CS='${{ vars.EVENT_HUB_CONNECTION_STRING }}'

          [ -n "$TARGET_URL" ] || { echo "::error::DT_TARGET_URL manquant"; exit 1; }
          [ -n "$TARGET_API_TOKEN" ] || { echo "::error::DT_API_TOKEN manquant"; exit 1; }
          [ -n "$EH_CS" ] || { echo "::error::EVENT_HUB_CONNECTION_STRING manquant"; exit 1; }

          echo "TARGET_URL=$TARGET_URL" >> $GITHUB_ENV
          echo "TARGET_API_TOKEN=$TARGET_API_TOKEN" >> $GITHUB_ENV
          echo "EVENT_HUB_CONNECTION_STRING=$EH_CS" >> $GITHUB_ENV

          if echo "$TARGET_URL" | grep -qE ':[0-9]+/e/'; then
            echo "USE_EXISTING_ACTIVE_GATE=true" >> $GITHUB_ENV
          else
            echo "USE_EXISTING_ACTIVE_GATE=true" >> $GITHUB_ENV
          fi
          echo "REQUIRE_VALID_CERTIFICATE=true" >> $GITHUB_ENV

          if [ -n "${{ github.event.inputs.filter_config }}" ]; then
            printf 'FILTER_CONFIG=%s\n' "${{ github.event.inputs.filter_config }}" >> $GITHUB_ENV
          fi
          if [ "${{ github.event.inputs.enable_self_monitoring }}" = "true" ]; then
            echo "SFM_ENABLED=true" >> $GITHUB_ENV
          fi

          echo "NETWORK_MODE=${{ github.event.inputs.network_mode }}" >> $GITHUB_ENV
          echo "VNET_NAME=${{ github.event.inputs.vnet_name }}" >> $GITHUB_ENV
          echo "VNET_RG_INPUT=${{ github.event.inputs.vnet_rg }}" >> $GITHUB_ENV
          echo "INT_SUBNET_NAME=${{ github.event.inputs.int_subnet_name }}" >> $GITHUB_ENV
          echo "PE_SUBNET_NAME=${{ github.event.inputs.pe_subnet_name }}" >> $GITHUB_ENV
          echo "CREATE_MISSING_SUBNETS=${{ github.event.inputs.create_missing_subnets }}" >> $GITHUB_ENV
          echo "CREATE_PE_DNS=${{ github.event.inputs.create_private_dns_zone_group }}" >> $GITHUB_ENV

          # Defaults si creation necessaire
          echo "VNET_ADDRESS_PREFIX=10.200.0.0/16" >> $GITHUB_ENV
          echo "INT_SUBNET_PREFIX=10.200.1.0/24" >> $GITHUB_ENV
          echo "PE_SUBNET_PREFIX=10.200.2.0/24" >> $GITHUB_ENV
          echo "PRIVATE_DNS_ZONE_NAME=privatelink.azurewebsites.net" >> $GITHUB_ENV

      # ---- Deduction RG/region via Event Hubs ----
      - name: Resolve Resource Group & Location from Event Hubs
        id: eh
        shell: bash
        run: |
          set -euo pipefail
          NS="$(echo "$EVENT_HUB_CONNECTION_STRING" | sed -n 's/.*Endpoint=sb:\/\/\([^\.]*\)\..*/\1/p' || true)"
          [ -n "$NS" ] || { echo "::error::Impossible d extraire le namespace Event Hubs depuis la chaine."; exit 1; }

          EH_JSON="$(az resource list --resource-type Microsoft.EventHub/namespaces -n "$NS" -o json)"
          RG="$(echo "$EH_JSON" | jq -r '.[0].resourceGroup // empty')"
          LOC="$(echo "$EH_JSON" | jq -r '.[0].location // empty')"
          [ -n "$RG" ] && [ -n "$LOC" ] || { echo "::error::Namespace $NS introuvable"; exit 1; }

          echo "RESOURCE_GROUP=$RG" >> $GITHUB_ENV
          echo "LOCATION=$LOC" >> $GITHUB_ENV
          if [ -z "${VNET_RG_INPUT:-}" ]; then
            echo "VNET_RG=$RG" >> $GITHUB_ENV
          else
            echo "VNET_RG=$VNET_RG_INPUT" >> $GITHUB_ENV
          fi

      - name: Download Dynatrace installer script (latest)
        run: |
          curl -fsSL https://github.com/dynatrace-oss/dynatrace-azure-log-forwarder/releases/latest/download/dynatrace-azure-logs.sh -o dynatrace-azure-logs.sh
          chmod +x dynatrace-azure-logs.sh

      - name: Sanity check before install
        run: |
          set -euo pipefail
          [ -n "${TARGET_URL:-}" ] || { echo "::error::TARGET_URL vide"; exit 1; }
          [ -n "${TARGET_API_TOKEN:-}" ] || { echo "::error::TARGET_API_TOKEN vide"; exit 1; }
          [ -n "${EVENT_HUB_CONNECTION_STRING:-}" ] || { echo "::error::EVENT_HUB_CONNECTION_STRING vide"; exit 1; }
          echo "OK: secrets/vars presents."

      - name: Deploy Dynatrace Azure Log Forwarder
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          TARGET_URL: ${{ env.TARGET_URL }}
          TARGET_API_TOKEN: ${{ env.TARGET_API_TOKEN }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          EVENT_HUB_CONNECTION_STRING: ${{ env.EVENT_HUB_CONNECTION_STRING }}
          USE_EXISTING_ACTIVE_GATE: ${{ env.USE_EXISTING_ACTIVE_GATE }}
          REQUIRE_VALID_CERTIFICATE: ${{ env.REQUIRE_VALID_CERTIFICATE }}
          FILTER_CONFIG: ${{ env.FILTER_CONFIG }}
          SFM_ENABLED: ${{ env.SFM_ENABLED }}
        run: |
          set -euo pipefail
          args=(
            --deployment-name "$DEPLOYMENT_NAME"
            --target-url "$TARGET_URL"
            --target-api-token "$TARGET_API_TOKEN"
            --resource-group "$RESOURCE_GROUP"
            --event-hub-connection-string "$EVENT_HUB_CONNECTION_STRING"
            --require-valid-certificate "$REQUIRE_VALID_CERTIFICATE"
            --use-existing-active-gate "$USE_EXISTING_ACTIVE_GATE"
          )
          if [ -n "${FILTER_CONFIG:-}" ]; then
            args+=( --filter-config "$FILTER_CONFIG" )
          fi
          if [ -n "${SFM_ENABLED:-}" ]; then
            args+=( --enable-self-monitoring true )
          fi
          ./dynatrace-azure-logs.sh "${args[@]}"

      - name: Resolve Function App
        id: fa
        run: |
          set -euo pipefail
          APP_NAME=$(az functionapp list -g "$RESOURCE_GROUP" --query "[?contains(name, '$DEPLOYMENT_NAME')].name | [0]" -o tsv)
          [ -n "$APP_NAME" ] && [ "$APP_NAME" != "null" ] || { echo "::error::Function App introuvable pour prefix $DEPLOYMENT_NAME"; exit 1; }
          echo "FUNCTION_APP=$APP_NAME" >> $GITHUB_ENV
          echo "function_app=$APP_NAME" >> $GITHUB_OUTPUT
          echo "Function App: $APP_NAME"

      # ---- Reseau: EXISTING ou CREATE ----
      - name: Prepare VNet and subnets (existing or create)
        shell: bash
        run: |
          set -euo pipefail
          echo "VNET_RG=$VNET_RG (mode=$NETWORK_MODE)"
          if [ "$NETWORK_MODE" = "create" ]; then
            az network vnet show -g "$VNET_RG" -n "$VNET_NAME" >/dev/null 2>&1 || \
              az network vnet create -g "$VNET_RG" -n "$VNET_NAME" --location "$LOCATION" --address-prefixes "$VNET_ADDRESS_PREFIX"
            az network vnet subnet show -g "$VNET_RG" --vnet-name "$VNET_NAME" -n "$INT_SUBNET_NAME" >/dev/null 2>&1 || \
              az network vnet subnet create -g "$VNET_RG" --vnet-name "$VNET_NAME" -n "$INT_SUBNET_NAME" --address-prefixes "$INT_SUBNET_PREFIX"
            az network vnet subnet show -g "$VNET_RG" --vnet-name "$VNET_NAME" -n "$PE_SUBNET_NAME" >/dev/null 2>&1 || \
              az network vnet subnet create -g "$VNET_RG" --vnet-name "$VNET_NAME" -n "$PE_SUBNET_NAME" --address-prefixes "$PE_SUBNET_PREFIX"
            az network vnet subnet update -g "$VNET_RG" --vnet-name "$VNET_NAME" -n "$PE_SUBNET_NAME" --disable-private-endpoint-network-policies true >/dev/null
          else
            if ! az network vnet show -g "$VNET_RG" -n "$VNET_NAME" >/dev/null 2>&1; then
              echo "::error::VNet $VNET_NAME introuvable dans RG $VNET_RG. Repasse network_mode=create pour le creer."
              exit 1
            fi
            if ! az network vnet subnet show -g "$VNET_RG" --vnet-name "$VNET_NAME" -n "$INT_SUBNET_NAME" >/dev/null 2>&1; then
              if [ "$CREATE_MISSING_SUBNETS" = "true" ]; then
                az network vnet subnet create -g "$VNET_RG" --vnet-name "$VNET_NAME" -n "$INT_SUBNET_NAME" --address-prefixes "$INT_SUBNET_PREFIX"
              else
                echo "::error::Subnet $INT_SUBNET_NAME absent et creation interdite."
                exit 1
              fi
            fi
            if ! az network vnet subnet show -g "$VNET_RG" --vnet-name "$VNET_NAME" -n "$PE_SUBNET_NAME" >/dev/null 2>&1; then
              if [ "$CREATE_MISSING_SUBNETS" = "true" ]; then
                az network vnet subnet create -g "$VNET_RG" --vnet-name "$VNET_NAME" -n "$PE_SUBNET_NAME" --address-prefixes "$PE_SUBNET_PREFIX"
              else
                echo "::error::Subnet $PE_SUBNET_NAME absent et creation interdite."
                exit 1
              fi
            fi
            az network vnet subnet update -g "$VNET_RG" --vnet-name "$VNET_NAME" -n "$PE_SUBNET_NAME" --disable-private-endpoint-network-policies true >/dev/null
          fi

      - name: Integrate Function App with VNet (regional outbound)
        run: |
          set -euo pipefail
          SUBS_ID=$(az account show --query id -o tsv)
          az functionapp vnet-integration add \
            -g "$RESOURCE_GROUP" \
            -n "$FUNCTION_APP" \
            --vnet "/subscriptions/$SUBS_ID/resourceGroups/$VNET_RG/providers/Microsoft.Network/virtualNetworks/$VNET_NAME" \
            --subnet "$INT_SUBNET_NAME" || true

      # ---- Private Endpoint + Private DNS ----
      - name: Create Private Endpoint (idempotent)
        id: pe
        run: |
          set -euo pipefail
          APP_ID=$(az functionapp show -g "$RESOURCE_GROUP" -n "$FUNCTION_APP" --query "id" -o tsv)
          GROUP_ID=$(az network private-link-resource list --id "$APP_ID" --query "[0].properties.groupId" -o tsv)
          [ -n "$GROUP_ID" ] || GROUP_ID="sites"

          PE_NAME="${DEPLOYMENT_NAME}-func-pe"
          az network private-endpoint show -g "$VNET_RG" -n "$PE_NAME" >/dev/null 2>&1 || \
            az network private-endpoint create \
              -g "$VNET_RG" \
              -n "$PE_NAME" \
              --vnet-name "$VNET_NAME" \
              --subnet "$PE_SUBNET_NAME" \
              --private-connection-resource-id "$APP_ID" \
              --group-id "$GROUP_ID" \
              --connection-name "${DEPLOYMENT_NAME}-func-pe-conn"

          echo "pe_name=$PE_NAME" >> $GITHUB_OUTPUT
          echo "PE_NAME=$PE_NAME" >> $GITHUB_ENV

      - name: Attach Private DNS zone group (privatelink.azurewebsites.net)
        run: |
          set -euo pipefail
          SUBS_ID=$(az account show --query id -o tsv)
          ZONE_RG="$RESOURCE_GROUP"
          ZONE_NAME="$PRIVATE_DNS_ZONE_NAME"

          if [ "${CREATE_PE_DNS}" = "true" ]; then
            az network private-dns zone show -g "$ZONE_RG" -n "$ZONE_NAME" >/dev/null 2>&1 || \
              az network private-dns zone create -g "$ZONE_RG" -n "$ZONE_NAME"

            LINK_NAME="${DEPLOYMENT_NAME}-dnslink"
            az network private-dns link vnet show -g "$ZONE_RG" -z "$ZONE_NAME" -n "$LINK_NAME" >/dev/null 2>&1 || \
              az network private-dns link vnet create \
                -g "$ZONE_RG" \
                -n "$LINK_NAME" \
                -z "$ZONE_NAME" \
                -v "/subscriptions/$SUBS_ID/resourceGroups/$VNET_RG/providers/Microsoft.Network/virtualNetworks/$VNET_NAME" \
                -e false

            az network private-endpoint dns-zone-group show \
              --endpoint-name "$PE_NAME" -g "$VNET_RG" -n "${DEPLOYMENT_NAME}-pe-dnsgrp" >/dev/null 2>&1 || \
              az network private-endpoint dns-zone-group create \
                --endpoint-name "$PE_NAME" \
                -g "$VNET_RG" \
                -n "${DEPLOYMENT_NAME}-pe-dnsgrp" \
                --zone-name "${DEPLOYMENT_NAME}-pe-dnszone" \
                --private-dns-zone "/subscriptions/$SUBS_ID/resourceGroups/$ZONE_RG/providers/Microsoft.Network/privateDnsZones/$ZONE_NAME"
          else
            echo "CREATE_PE_DNS=false, etape DNS ignoree."
          fi

      - name: Summary
        run: |
          echo "âœ… Deploiement termine."
          echo "RG App: $RESOURCE_GROUP | Region: $LOCATION"
          echo "Function App: $FUNCTION_APP"
          echo "VNet RG: $VNET_RG | VNet: $VNET_NAME"
          echo "Subnets: $INT_SUBNET_NAME, $PE_SUBNET_NAME"
