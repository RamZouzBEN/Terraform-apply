name: Deploy Dynatrace Azure Log Forwarder (Auto-RG/VNet/PE)

on:
  workflow_dispatch:
    inputs:
      deployment_name:
        description: "Nom (3-20 caractères, minuscules/chiffres)"
        required: true
      enable_self_monitoring:
        description: "Activer la télémétrie self-monitoring (Azure Metrics)"
        required: true
        default: "false"
      filter_config:
        description: "OPTIONNEL - Filtres (ex: FILTER.GLOBAL.MIN_LOG_LEVEL=Warning)"
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install CLI deps
        run: |
          az version
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Validate & set base env
        run: |
          set -euo pipefail
          if ! [[ "${{ github.event.inputs.deployment_name }}" =~ ^[a-z0-9]{3,20}$ ]]; then
            echo "DEPLOYMENT_NAME doit être 3-20 chars, minuscules/chiffres."; exit 1
          fi
          echo "DEPLOYMENT_NAME=${{ github.event.inputs.deployment_name }}" >> $GITHUB_ENV
          echo "TARGET_URL=${{ secrets.DT_TARGET_URL }}" >> $GITHUB_ENV
          echo "TARGET_API_TOKEN=${{ secrets.DT_API_TOKEN }}" >> $GITHUB_ENV
          echo "EVENT_HUB_CONNECTION_STRING=${{ secrets.EVENT_HUB_CONNECTION_STRING }}" >> $GITHUB_ENV

          # Déduire mode ActiveGate automatiquement depuis l'URL cible
          if echo "${{ secrets.DT_TARGET_URL }}" | grep -qE ':[0-9]+/e/'; then
            echo "USE_EXISTING_ACTIVE_GATE=true" >> $GITHUB_ENV
          else
            echo "USE_EXISTING_ACTIVE_GATE=false" >> $GITHUB_ENV
          fi

          # Certificat valide par défaut (recommandé)
          echo "REQUIRE_VALID_CERTIFICATE=true" >> $GITHUB_ENV

          # Optionnels
          if [ -n "${{ github.event.inputs.filter_config }}" ]; then
            echo "FILTER_CONFIG=${{ github.event.inputs.filter_config }}" >> $GITHUB_ENV
          fi
          if [ "${{ github.event.inputs.enable_self_monitoring }}" = "true" ]; then
            echo "SFM_ENABLED=true" >> $GITHUB_ENV
          fi

      - name: Resolve Event Hubs namespace RG & location from connection string
        id: eh
        run: |
          set -euo pipefail
          # Extrait le namespace à partir de Endpoint=sb://<NAMESPACE>.servicebus.windows.net/ ...
          NS=$(echo "$EVENT_HUB_CONNECTION_STRING" | sed -n 's/.*Endpoint=sb:\/\/\([^\.]*\)\..*/\1/p' || true)
          if [ -z "$NS" ]; then
            echo "Impossible d'extraire le namespace Event Hubs depuis la chaîne." >&2; exit 1
          fi
          echo "EH Namespace: $NS"

          EH_JSON=$(az resource list --resource-type "Microsoft.EventHub/namespaces" -n "$NS" -o json)
          RG=$(echo "$EH_JSON" | jq -r '.[0].resourceGroup // empty')
          LOC=$(echo "$EH_JSON" | jq -r '.[0].location // empty')
          if [ -z "$RG" ] || [ -z "$LOC" ]; then
            echo "Namespace $NS introuvable via Azure CLI. Vérifie la souscription de ton SPN." >&2; exit 1
          fi

          echo "RESOURCE_GROUP=$RG" >> $GITHUB_ENV
          echo "LOCATION=$LOC" >> $GITHUB_ENV
          echo "resource_group=$RG" >> $GITHUB_OUTPUT
          echo "location=$LOC" >> $GITHUB_OUTPUT
          echo "RG résolu: $RG | Région: $LOC"

      - name: Download Dynatrace installer script (latest)
        run: |
          curl -fsSL https://github.com/dynatrace-oss/dynatrace-azure-log-forwarder/releases/latest/download/dynatrace-azure-logs.sh -o dynatrace-azure-logs.sh
          chmod +x dynatrace-azure-logs.sh

      - name: Deploy Dynatrace Azure Log Forwarder
        env:
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          TARGET_URL: ${{ env.TARGET_URL }}
          TARGET_API_TOKEN: ${{ env.TARGET_API_TOKEN }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          EVENT_HUB_CONNECTION_STRING: ${{ env.EVENT_HUB_CONNECTION_STRING }}
          USE_EXISTING_ACTIVE_GATE: ${{ env.USE_EXISTING_ACTIVE_GATE }}
          REQUIRE_VALID_CERTIFICATE: ${{ env.REQUIRE_VALID_CERTIFICATE }}
          FILTER_CONFIG: ${{ env.FILTER_CONFIG }}
          SFM_ENABLED: ${{ env.SFM_ENABLED }}
        run: |
          set -euo pipefail
          args=(
            --deployment-name "$DEPLOYMENT_NAME"
            --target-url "$TARGET_URL"
            --target-api-token "$TARGET_API_TOKEN"
            --resource-group "$RESOURCE_GROUP"
            --event-hub-connection-string "$EVENT_HUB_CONNECTION_STRING"
            --require-valid-certificate "$REQUIRE_VALID_CERTIFICATE"
          )
          if [ "${USE_EXISTING_ACTIVE_GATE}" = "true" ]; then
            args+=( --use-existing-active-gate true )
          fi
          if [ -n "${FILTER_CONFIG:-}" ]; then
            args+=( --filter-config "$FILTER_CONFIG" )
          fi
          if [ -n "${SFM_ENABLED:-}" ]; then
            args+=( --enable-self-monitoring true )
          fi

          ./dynatrace-azure-logs.sh "${args[@]}"

      - name: Resolve Function App
        id: fa
        run: |
          set -euo pipefail
          APP_NAME=$(az functionapp list -g "$RESOURCE_GROUP" --query "[?contains(name, '$DEPLOYMENT_NAME')].name | [0]" -o tsv)
          if [ -z "$APP_NAME" ] || [ "$APP_NAME" = "null" ]; then
            echo "Impossible de retrouver la Function App (prefix: $DEPLOYMENT_NAME)"; exit 1
          fi
          echo "FUNCTION_APP=$APP_NAME" >> $GITHUB_ENV
          echo "function_app=$APP_NAME" >> $GITHUB_OUTPUT
          echo "Function App: $APP_NAME"
          az functionapp show -g "$RESOURCE_GROUP" -n "$APP_NAME" --query "defaultHostName" -o tsv || true

      # ---------------------------
      # Réseau : VNet + subnets auto (si absents)
      # ---------------------------
      - name: Ensure VNet & subnets exist (create if missing)
        run: |
          set -euo pipefail
          VNET_NAME="${DEPLOYMENT_NAME}-vnet"
          INT_SUBNET="snet-appsvc-int"
          PE_SUBNET="snet-pe"

          # Crée le VNet s'il n'existe pas (plage privée "neutre")
          az network vnet show -g "$RESOURCE_GROUP" -n "$VNET_NAME" >/dev/null 2>&1 || \
            az network vnet create -g "$RESOURCE_GROUP" -n "$VNET_NAME" --location "$LOCATION" --address-prefixes 10.200.0.0/16

          # Subnet d'intégration VNet (doit être vide et dédié App Service)
          az network vnet subnet show -g "$RESOURCE_GROUP" --vnet-name "$VNET_NAME" -n "$INT_SUBNET" >/dev/null 2>&1 || \
            az network vnet subnet create -g "$RESOURCE_GROUP" --vnet-name "$VNET_NAME" -n "$INT_SUBNET" --address-prefixes 10.200.1.0/24

          # Subnet du Private Endpoint (+ disable network policies)
          az network vnet subnet show -g "$RESOURCE_GROUP" --vnet-name "$VNET_NAME" -n "$PE_SUBNET" >/dev/null 2>&1 || \
            az network vnet subnet create -g "$RESOURCE_GROUP" --vnet-name "$VNET_NAME" -n "$PE_SUBNET" --address-prefixes 10.200.2.0/24

          az network vnet subnet update -g "$RESOURCE_GROUP" --vnet-name "$VNET_NAME" -n "$PE_SUBNET" \
            --disable-private-endpoint-network-policies true >/dev/null

          echo "VNET_NAME=$VNET_NAME" >> $GITHUB_ENV
          echo "INT_SUBNET=$INT_SUBNET" >> $GITHUB_ENV
          echo "PE_SUBNET=$PE_SUBNET" >> $GITHUB_ENV

      - name: Integrate Function App with VNet (regional outbound)
        run: |
          set -euo pipefail
          az functionapp vnet-integration add \
            -g "$RESOURCE_GROUP" \
            -n "$FUNCTION_APP" \
            --vnet "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME" \
            --subnet "$INT_SUBNET" || true
          # L'opération est idempotente; '|| true' pour tolérer l'existant.

      # ---------------------------
      # Private Endpoint + Private DNS
      # ---------------------------
      - name: Create Private Endpoint (idempotent)
        id: pe
        run: |
          set -euo pipefail
          APP_ID=$(az functionapp show -g "$RESOURCE_GROUP" -n "$FUNCTION_APP" --query "id" -o tsv)
          GROUP_ID=$(az network private-link-resource list --id "$APP_ID" --query "[0].properties.groupId" -o tsv)
          [ -z "$GROUP_ID" ] && GROUP_ID="sites"

          PE_NAME="${DEPLOYMENT_NAME}-func-pe"
          az network private-endpoint show -g "$RESOURCE_GROUP" -n "$PE_NAME" >/dev/null 2>&1 || \
            az network private-endpoint create \
              -g "$RESOURCE_GROUP" \
              -n "$PE_NAME" \
              --vnet-name "$VNET_NAME" \
              --subnet "$PE_SUBNET" \
              --private-connection-resource-id "$APP_ID" \
              --group-id "$GROUP_ID" \
              --connection-name "${DEPLOYMENT_NAME}-func-pe-conn"

          echo "pe_name=$PE_NAME" >> $GITHUB_OUTPUT
          echo "PE_NAME=$PE_NAME" >> $GITHUB_ENV

      - name: Attach Private DNS zone group (privatelink.azurewebsites.net)
        run: |
          set -euo pipefail
          ZONE_RG="$RESOURCE_GROUP"
          ZONE_NAME="privatelink.azurewebsites.net"
          # Crée la zone privée si absente
          az network private-dns zone show -g "$ZONE_RG" -n "$ZONE_NAME" >/dev/null 2>&1 || \
            az network private-dns zone create -g "$ZONE_RG" -n "$ZONE_NAME"

          # Lier la zone au VNet
          LINK_NAME="${DEPLOYMENT_NAME}-dnslink"
          az network private-dns link vnet show -g "$ZONE_RG" -z "$ZONE_NAME" -n "$LINK_NAME" >/dev/null 2>&1 || \
            az network private-dns link vnet create \
              -g "$ZONE_RG" \
              -n "$LINK_NAME" \
              -z "$ZONE_NAME" \
              -v "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME" \
              -e false

          # Associer le PE à la zone
          az network private-endpoint dns-zone-group show \
            --endpoint-name "$PE_NAME" -g "$RESOURCE_GROUP" -n "${DEPLOYMENT_NAME}-pe-dnsgrp" >/dev/null 2>&1 || \
            az network private-endpoint dns-zone-group create \
              --endpoint-name "$PE_NAME" \
              -g "$RESOURCE_GROUP" \
              -n "${DEPLOYMENT_NAME}-pe-dnsgrp" \
              --zone-name "${DEPLOYMENT_NAME}-pe-dnszone" \
              --private-dns-zone "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$ZONE_RG/providers/Microsoft.Network/privateDnsZones/$ZONE_NAME"

      - name: Summary
        run: |
          echo "✅ Déploiement terminé."
          echo "RG: $RESOURCE_GROUP | Région: $LOCATION"
          echo "Function App: $FUNCTION_APP"
          echo "VNet: $VNET_NAME | Subnets: $INT_SUBNET, $PE_SUBNET"
          echo "Private Endpoint: $PE_NAME"
