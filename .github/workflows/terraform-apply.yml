name: terraform-aws

on:
  push:
    branches: [ "**" ]
    paths:
      - "infra/**"
      - ".github/workflows/terraform-aws.yml"
  pull_request:
    branches: [ "**" ]
    paths:
      - "infra/**"
      - ".github/workflows/terraform-aws.yml"
  workflow_dispatch:
    inputs:
      var_file:
        description: "Chemin du .tfvars (relatif à infra/, ex: dev.tfvars)"
        required: false
        default: ""
      apply:
        description: "Exécuter terraform apply ? (true/false)"
        required: true
        default: "false"

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AWS_REGION: eu-west-1
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"

concurrency:
  group: tf-${{ github.ref }}
  cancel-in-progress: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: infra   # <<< tout se passe dans infra/

    steps:
      - name: Clear caches
        uses: easimon/wipe-cache@main
        with:
          dry-run: 'true'
          
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.2"

      # Cache providers/plugins Terraform pour infra/
      - name: Restore Terraform plugin cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            infra/.terraform
          key: tf-${{ runner.os }}-${{ hashFiles('infra/**/*.tf', 'infra/.terraform.lock.hcl') }}
          restore-keys: |
            tf-${{ runner.os }}-
      # Vérifie le format sur PR, corrige automatiquement sur push
      - name: Terraform fmt (check on PR)
        if: github.event_name == 'pull_request'
        run: terraform fmt -check -recursive

      - name: Terraform fmt (auto-fix on push)
        if: github.event_name != 'pull_request'
        run: terraform fmt -recursive

      - name: Commit formatted files (push only)
        if: github.event_name != 'pull_request'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(fmt): terraform auto-format"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Terraform init
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        run: terraform init -input=false

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        env:
          TF_CLI_ARGS_plan: "-no-color"
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.inputs.var_file }}" ]; then
            terraform plan -out=tfplan -var-file="${{ github.event.inputs.var_file }}"
          else
            terraform plan -out=tfplan
          fi
          terraform show -no-color tfplan > tfplan.txt

      - name: Comment plan on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          filePath: infra/tfplan.txt
          message: |
            ### Terraform plan result
            <details><summary>Show plan</summary>

            ```diff
            ${{ steps.plan.outcome == 'success' && join(fromJSON('[""]'), '') || '' }}
            ```
            </details>

      - name: Save Terraform plugin cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            infra/.terraform
          key: tf-${{ runner.os }}-${{ hashFiles('infra/**/*.tf', 'infra/.terraform.lock.hcl') }}

      # Apply auto sur main, ou manuel via workflow_dispatch: apply=true
      - name: Terraform apply
        if: >
          (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main'))
          || (github.event_name == 'workflow_dispatch' && github.event.inputs.apply == 'true')
        env:
          TF_CLI_ARGS_apply: "-auto-approve -no-color"
        run: terraform apply -auto-approve tfplan
