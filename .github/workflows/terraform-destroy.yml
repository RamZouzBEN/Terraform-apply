name: terraform-destroy

on:
  workflow_dispatch:
    inputs:
      var_file:
        description: "Chemin du .tfvars (relatif à infra/, ex: prod.tfvars)"
        required: false
        default: ""
      target:
        description: "Optionnel: -target=... (module/ressource). Laisser vide pour tout détruire."
        required: false
        default: ""

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-1
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"

concurrency:
  group: tf-destroy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    # par défaut on reste à la racine; on passera en infra/ à partir de Terraform init
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      # 1) Safety check à la racine
      - name: Safety confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "DESTROY-MY-INFRA" ]; then
            echo "Refusé: tu dois confirmer en saisissant exactement 'DESTROY-MY-INFRA'."
            exit 1
          fi

      # 2) Checkout à la racine
      - name: Checkout
        uses: actions/checkout@v4

      # 3) Vérifier que infra/ existe (debug utile)
      - name: Assert 'infra/' exists & show tree
        run: |
          echo "PWD: $(pwd)"
          echo "Repo root content:"
          ls -la .
          echo "Infra content:"
          ls -la infra || (echo "::error::Le dossier 'infra' est introuvable à la racine du repo." && exit 1)

      # 4) AWS OIDC creds
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # 5) Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.5"

      # 6) Cache providers/plugin (chemins vers infra/)
      - name: Restore Terraform plugin cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            infra/.terraform
          key: tf-${{ runner.os }}-${{ hashFiles('infra/**/*.tf', 'infra/.terraform.lock.hcl') }}
          restore-keys: |
            tf-${{ runner.os }}-

      - name: Terraform init
        working-directory: infra
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        run: terraform init -input=false

      - name: Terraform plan -destroy (dry-run)
        working-directory: infra
        env:
          TF_CLI_ARGS_plan: "-no-color"
        run: |
          set -euo pipefail
          ARGS=()
          if [ -n "${{ github.event.inputs.var_file }}" ]; then
            ARGS+=("-var-file=${{ github.event.inputs.var_file }}")
          fi
          if [ -n "${{ github.event.inputs.target }}" ]; then
            ARGS+=("-target=${{ github.event.inputs.target }}")
          fi
          terraform plan -destroy -out=tfplan.destroy "${ARGS[@]}"
          terraform show -no-color tfplan.destroy > tfplan-destroy.txt

      - name: Upload destroy plan (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-destroy
          path: infra/tfplan-destroy.txt

      - name: Terraform destroy (apply)
        working-directory: infra
        env:
          TF_CLI_ARGS_destroy: "-no-color"
        run: |
          set -euo pipefail
          ARGS=()
          if [ -n "${{ github.event.inputs.var_file }}" ]; then
            ARGS+=("-var-file=${{ github.event.inputs.var_file }}")
          fi
          if [ -n "${{ github.event.inputs.target }}" ]; then
            ARGS+=("-target=${{ github.event.inputs.target }}")
          fi
          terraform destroy -auto-approve "${ARGS[@]}"

      - name: Save Terraform plugin cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            infra/.terraform
          key: tf-${{ runner.os }}-${{ hashFiles('infra/**/*.tf', 'infra/.terraform.lock.hcl') }}
