name: terraform-destroy

on:
  workflow_dispatch:
    inputs:
      var_file:
        description: "Chemin du .tfvars (relatif à infra/, ex: prod.tfvars)"
        required: false
        default: ""
      target:
        description: "Optionnel: -target=... (module/ressource). Laisser vide pour tout détruire."
        required: false
        default: ""

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-1
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"

concurrency:
  group: tf-destroy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: infra

    steps:

      - name: Checkout
        uses: actions/checkout@v4

# Option: paramètre pour choisir la branche à détruire (par défaut main)
# on.workflow_dispatch.inputs.branch -> default: "main"

      - name: Download tfstate from last successful run (search by name)
        uses: dawidd6/action-download-artifact@v6
        with:
          repo: ${{ github.repository }}
          # on filtre sur les runs "success" (si tu veux tout, enlève cette ligne)
          workflow_conclusion: success
          branch: main                    # adapte si besoin (ou rends-le input)
          search_artifacts: true          # <- active la recherche par nom
          name: tfstate-main              # <- DOIT matcher l’artifact uploadé par l’apply
          path: infra/
          if_no_artifact_found: fail


      - name: Verify tfstate presence
        run: |
          echo "Content of infra/:"
          ls -la infra || true
          test -f infra/terraform.tfstate && echo "OK: tfstate trouvé" || (echo "::warning::Pas de tfstate local (backend distant ? mauvais nom d'artifact ?)"; exit 0)


      - name: Assert 'infra/' exists & show tree
        working-directory: .
        run: |
          echo "PWD: $(pwd)"
          ls -la .
          ls -la infra || (echo "::error::Le dossier 'infra' est introuvable." && exit 1)

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.2"

      - name: Restore Terraform plugin cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            infra/.terraform
          key: tf-${{ runner.os }}-${{ hashFiles('infra/**/*.tf', 'infra/.terraform.lock.hcl') }}
          restore-keys: |
            tf-${{ runner.os }}-

      - name: Terraform init
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        run: terraform init -input=false

      - name: Terraform init
        working-directory: infra
        env:
          TF_PLUGIN_CACHE_DIR: $HOME/.terraform.d/plugin-cache
        run: terraform init -input=false

      - name: Terraform plan -destroy
        working-directory: infra
        run: terraform plan -destroy -out=tfplan.destroy

      - name: Terraform destroy
        working-directory: infra
        run: terraform apply -auto-approve tfplan.destroy


